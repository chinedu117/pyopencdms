# =============================== #
# Autogenerated file, do not edit #
# =============================== #
from geoalchemy2 import Geography

from sqlalchemy import (
    Column,
    DateTime,
    ForeignKey,
    Integer,
    MetaData,
    Numeric,
    String,
    Table
)
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import declarative_base, relationship, backref
Base = declarative_base()
metadata = Base.metadata

observation_table = Table(
    "observation_type", metadata,
    Column( "id", Integer, comment="ID / primary key", primary_key=True),
    Column( "name", String, comment="Short name for observation type"),
    Column( "description", String, comment="Description of observation type"),
    Column(  "link", String, comment="Link to definition of observation type"),
    schema="cdm"
)

feature_type_table = Table(
    "feature_type", metadata,
    Column( "id", Integer, comment="ID / primary key", primary_key=True),
    Column( "name", String, comment="Short name for feature type"),
    Column( "description", String, comment="Description of feature type"),
    Column( "link", String, comment="Link to definition of feature type"),
    schema="cdm"
)


observed_property_table = Table(
    "observed_property", metadata,
    Column( "id", Integer, comment="ID / primary key", primary_key=True),
    Column( "short_name", String, comment="Short name representation of observed property, e.g. 'at'"),
    Column( "standard_name", String, comment="CF standard name (if applicable), e.g. 'air_temperature'"),
    Column( "units", String, comment="Canonical units, e.g. 'Kelvin'"),
    Column( "description", String, comment="Description of observed property"),
    Column( "link", String, comment="Link to definition / source of observed property"),
    schema="cdm"
)


observing_procedure_table = Table(
    "observing_procedure",metadata,
    Column( "id", Integer, comment="ID / primary key", primary_key=True),
    Column( "name", String, comment="Name of observing procedure"),
    Column( "description", String, comment="Description of observing procedure"),
    Column( "link", String, comment="Link to further information"),
    schema="cdm"
)


record_status_table = Table(
    "record_status",metadata,
    Column( "id", Integer, comment="ID / primary key", primary_key=True),
    Column( "name", String, comment="Short name for status"),
    Column( "description", String, comment="Description of the status"),
    schema="cdm"
)

stations_table = Table(
    "stations",metadata,
    Column( "id", String, comment="ID / primary key", primary_key=True),
    Column( "name", String, comment="Preferred name of station"),
    Column( "description", String, comment="Station description"),
    Column( "link", String, comment="URI to station, e.g. to OSCAR/Surface"),
    Column( "location", Geography, comment="Location of station"),
    Column( "elavation", Numeric, comment="Elevation of station above mean sea level"),
    Column("wigos_station_identifier",  String, comment="WIGOS station identifier"),
    Column("facility_type",  String, comment="Type of observing facility, fixed land, mobile sea, etc"),
    Column( "date_established", String, comment="Date station was first established"),
    Column( "wmo_region", String, comment="WMO region in which the station is located"),
    Column("territory",  String, comment="Territory the station is located in"),
    Column( "valid_from", DateTime, comment="Date from which the details for this record are valid"),
    Column("valid_to",  DateTime, comment="Date after which the details for this record are no longer valid"),
    Column( "version", Integer, comment="Version number of this record"),
    Column( "change_date", DateTime, comment="Date this record was changed"),
    Column( "status", ForeignKey("cdm.record_status.id"), comment="Whether this is the latest version or an archived version of the record"),
    Column( "comments", String, comment="Free text comments on this record, for example description of changes made etc"),
    schema="cdm"
)

sensors_table = Table(
    "sensors",metadata,
    Column( "id", String, comment="ID / primary key", primary_key=True),
    Column( "name", String, comment="Name of sensor"),
    Column( "description", String, comment="Description of sensor"),
    Column("link",  String, comment="Link to further information"),
    schema="cdm"

)



observations_table = Table(
    "observations",metadata,
    Column( "id", String, comment="ID / primary key", primary_key=True),
    Column( "location", Geography, comment="location of observation"),
    Column("observation_type", ForeignKey("cdm.observation_type.id"), comment="Type of observation"),
    Column( "phenomenon_start", DateTime, comment="Start time of the phenomenon being observed or observing period, if missing assumed instantaneous with time given by phenomenon_end"),
    Column( "phenomenon_end", DateTime, comment="End time of the phenomenon being observed or observing period"),
    Column("result_value",  Numeric, comment="The value of the result in numeric representation"),
    Column( "result_uom", String, comment="Units used to represent the value being observed"),
    Column("result_description",  String, comment="String representation of the result if applicable"),
    Column( "result_quality", JSONB, comment="JSON representation of the result quality, key / value pairs"),
    Column( "result_time", DateTime, comment="Time that the result became available"),
    Column( "valid_from", DateTime, comment="Time that the result starts to be valid"),
    Column( "valid_to", DateTime, comment="Time after which the result is no longer valid"),
    Column( "station", ForeignKey("cdm.stations.id"), comment="Station associated with making the observation, equivalent to OGC OMS 'host'"),
    Column( "sensor", ForeignKey("cdm.sensors.id"), comment="Sensor associated with making the observation, equivalent to OGC OMS 'observer'"),
    Column("observed_property", ForeignKey("cdm.observed_property.id"), comment="The phenomenon, or thing, being observed"),
    Column( "observing_procedure", ForeignKey("cdm.observing_procedure.id"), comment="Procedure used to make the observation"),
    Column( "report_id", String, comment="Parent report ID, used to link coincident observations together"),
    Column( "collection", ForeignKey("cdm.collections.id"), comment="Primary collection or dataset that this observation belongs to"),
    Column("parameter",  JSONB, comment="List of key/ value pairs in JSONB"),
    Column("feature_of_interest", ForeignKey("cdm.features.id"), comment="Feature that this observation is associated with"),
    Column("version",  Integer, comment="Version number of this record"),
    Column("change_date",  DateTime, comment="Date this record was changed"),
    Column( "status", ForeignKey("cdm.record_status.id"), comment="Whether this is the latest version or an archived version of the record"),
    Column( "comments", String, comment="Free text comments on this record, for example description of changes made etc"),
    schema="cdm"
)

collections_table = Table("collections", metadata,
    id = Column( "id", String, comment="ID / primary key", primary_key=True),
    name = Column( "name", String, comment="Name of collection"),
    link = Column( "link", String, comment="Link to further information on collection"),
    schema="cdm"
 
 )

features_table = Table(
    "features", metadata,
    Column("id",  String, comment="ID / primary key", primary_key=True),
    Column("type", ForeignKey("cdm.feature_type.id"), comment="enumerated feature type"),
    Column( "geometry",  Geography, comment=""),
    Column("parent", ForeignKey("cdm.features.id"), comment="Parent feature for this feature if nested"),
    schema="cdm"

)


users_table = Table('users', metadata,
    Column( "id", String, comment="ID / primary key", primary_key=True),
    Column("username", String, comment="User name"),
    schema="cdm"
  )


station_roles_table = Table('station_roles', metadata,
    name = Column("name", String, index=True),
    id = Column("id", Integer, primary_key=True, autoincrement=True),
    user_id = Column("user_id", String, ForeignKey("cdm.users.id"), nullable=False),
    station_id = Column("station_id", String, ForeignKey("cdm.stations.id"), nullable=False),
    schema="cdm"
)



def start_mappers():
    pass
class StationsRole(Base):
    user = relationship("Users", backref=backref("station_roles", lazy=False), lazy=False)
    station = relationship("Stations", backref=backref("roles", lazy=False), lazy=False)


## Relationships
class Observations(Base):
    source_station = relationship("Stations", backref=backref("observation", lazy=False), lazy=False)
